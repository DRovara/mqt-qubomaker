[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm>=8"
]
build-backend = "setuptools.build_meta"

[project]
name = "mqt.qubomaker"
description = "A tool for the automatic generation and combination of QUBO formulations for specific problem classes."
readme = "README.md"
authors = [
    { name = "Damian Rovara", email = "damian.rovara@tum.de" },
    { name = "Nils Quetschlich", email = "nils.quetschlich@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de"},
]
keywords = ["MQT",  "quantum-computing", "qubo", "shortest-path", "design-automation"]
license = { file = "LICENSE" }
requires-python = ">=3.8"
dynamic = ["version"]

dependencies = [
    "qiskit>=1.0.0",
    "joblib",
    "numpy",
    "sympy",
    "matplotlib",
    "networkx",
    "python_tsp",
    "docplex",
    "qiskit_optimization",
    "tsplib95",
    "jsonschema",
    "IPython",
    "ipywidgets",
    "typing_extensions"
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]

[project.optional-dependencies]
test = ["pytest>=7"]
coverage = ["mqt.qubomaker[test]", "pytest-cov"]
docs = [
    "furo>=2023.08.17",
    "sphinx~=7.0",
    "setuptools-scm>=8",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton",
    "sphinx-hoverxref",
    "pybtex>=0.24",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "sphinxext-opengraph",
    "sphinx-autodoc-typehints",
    "qiskit[visualization]",
]
dev = ["mqt.qubomaker[coverage, docs]"]

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-qubomaker"
Documentation = "https://mqt.readthedocs.io/projects/qubomaker"
Issues = "https://github.com/cda-tum/mqt-qubomaker/issues"
Discussions = "https://github.com/cda-tum/mqt-qubomaker/discussions"

[tool.setuptools_scm]

[tool.setuptools.package-data]
"mqt.qubomaker.pathfinder" = ["resources/*", "resources/constraints/*"]


[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
files = ["src", "tests", "setup.py"]
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
pretty = true

[[tool.mypy.overrides]]
module = ["types-Pillow", "jsonschema", "tsplib95.*", "ipywidgets.*", "IPython.*", "qiskit.*", "qiskit_algorithms.*",  "matplotlib.*", "python_tsp.*", "networkx.*", "mqt.ddsim.*", "joblib.*", "qiskit_optimization.*", "docplex.*", "typing_extensions.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
src = ["src"]
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
#    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
#    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
  #  "N",           # flake8-naming
  #  "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "PLR",  # Design related pylint codes
    "ISC001", # Added because of ruff-format warning
    "SLF001", # Added because private member variables must be accessed
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
    "F405",
    "B018"
]

[tool.ruff.pydocstyle]
convention = "google"
